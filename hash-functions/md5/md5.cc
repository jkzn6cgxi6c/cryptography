#include <endian.h>
#include "md5.hh"

const unsigned char md5::k[] = {
    0x78, 0xA4, 0x6A, 0xD7, 0x56, 0xB7, 0xC7, 0xE8, 0xDB, 0x70, 0x20, 0x24, 0xEE, 0xCE, 0xBD, 0xC1,
    0xAF, 0x0F, 0x7C, 0xF5, 0x2A, 0xC6, 0x87, 0x47, 0x13, 0x46, 0x30, 0xA8, 0x01, 0x95, 0x46, 0xFD,
    0xD8, 0x98, 0x80, 0x69, 0xAF, 0xF7, 0x44, 0x8B, 0xB1, 0x5B, 0xFF, 0xFF, 0xBE, 0xD7, 0x5C, 0x89,
    0x22, 0x11, 0x90, 0x6B, 0x93, 0x71, 0x98, 0xFD, 0x8E, 0x43, 0x79, 0xA6, 0x21, 0x08, 0xB4, 0x49,
    0x62, 0x25, 0x1E, 0xF6, 0x40, 0xB3, 0x40, 0xC0, 0x51, 0x5A, 0x5E, 0x26, 0xAA, 0xC7, 0xB6, 0xE9,
    0x5D, 0x10, 0x2F, 0xD6, 0x53, 0x14, 0x44, 0x02, 0x81, 0xE6, 0xA1, 0xD8, 0xC8, 0xFB, 0xD3, 0xE7,
    0xE6, 0xCD, 0xE1, 0x21, 0xD6, 0x07, 0x37, 0xC3, 0x87, 0x0D, 0xD5, 0xF4, 0xED, 0x14, 0x5A, 0x45,
    0x05, 0xE9, 0xE3, 0xA9, 0xF8, 0xA3, 0xEF, 0xFC, 0xD9, 0x02, 0x6F, 0x67, 0x8A, 0x4C, 0x2A, 0x8D,
    0x42, 0x39, 0xFA, 0xFF, 0x81, 0xF6, 0x71, 0x87, 0x22, 0x61, 0x9D, 0x6D, 0x0C, 0x38, 0xE5, 0xFD,
    0x44, 0xEA, 0xBE, 0xA4, 0xA9, 0xCF, 0xDE, 0x4B, 0x60, 0x4B, 0xBB, 0xF6, 0x70, 0xBC, 0xBF, 0xBE,
    0xC6, 0x7E, 0x9B, 0x28, 0xFA, 0x27, 0xA1, 0xEA, 0x85, 0x30, 0xEF, 0xD4, 0x05, 0x1D, 0x88, 0x04,
    0x39, 0xD0, 0xD4, 0xD9, 0xE5, 0x99, 0xDB, 0xE6, 0xF8, 0x7C, 0xA2, 0x1F, 0x65, 0x56, 0xAC, 0xC4,
    0x44, 0x22, 0x29, 0xF4, 0x97, 0xFF, 0x2A, 0x43, 0xA7, 0x23, 0x94, 0xAB, 0x39, 0xA0, 0x93, 0xFC,
    0xC3, 0x59, 0x5B, 0x65, 0x92, 0xCC, 0x0C, 0x8F, 0x7D, 0xF4, 0xEF, 0xFF, 0xD1, 0x5D, 0x84, 0x85,
    0x4F, 0x7E, 0xA8, 0x6F, 0xE0, 0xE6, 0x2C, 0xFE, 0x14, 0x43, 0x01, 0xA3, 0xA1, 0x11, 0x08, 0x4E,
    0x82, 0x7E, 0x53, 0xF7, 0x35, 0xF2, 0x3A, 0xBD, 0xBB, 0xD2, 0xD7, 0x2A, 0x91, 0xD3, 0x86, 0xEB};

const unsigned char md5::s[] = {
     7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
     5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
     4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
     6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21};

const unsigned char md5::iv[] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10};

md5::md5() : length(0), offset(0)
{
    for(unsigned int i = 0; i < sizeof(h); i++)
    {
        h[i] = iv[i];
    }
    return;
}

void md5::write(const unsigned char buf[], int count)
{
    length += count;
    while(count > 0)
    {
        block[offset] = *buf;
        offset++;
        if(offset == 64)
        {
            offset = 0;
            calculate(block, h);
        }
        buf++;
        count--;
    }
    return;
}

unsigned char *md5::get()
{
    unsigned int i;
    for(i = 0; i < sizeof(H); i++)
    {
        H[i] = h[i];
    }
    block[offset] = 128;
    i = offset + 1;
    if(offset < 56)
    {
        for(; i < 56; i++)
        {
            block[i] = 0;
        }
        ((uint64_t*)block)[7] = htole64(length << 3);
        calculate(block, H);
    }
    else
    {
        for(; i < 64; i++)
        {
            block[i] = 0;
        }
        calculate(block, H);
        uint64_t temp[8] = {0, 0, 0, 0, 0, 0, 0, htole64(length << 3)};
        calculate((unsigned char*)temp, H);
    }
    return H;
}

#define ROTL(x, y) ((x) << (y) | (x) >> (32 - (y)))

#define IV ((uint32_t*)h)

#define FUNC                                                          \
f += le32toh(((uint32_t*)k)[i]) + le32toh(((uint32_t*)block)[g]) + a; \
a = d;                                                                \
d = c;                                                                \
c = b;                                                                \
b += ROTL(f, s[i]);

void md5::calculate(const unsigned char block[64], unsigned char h[16])
{
    uint32_t a = le32toh(IV[0]), b = le32toh(IV[1]), c = le32toh(IV[2]), d = le32toh(IV[3]), f, g;
    int i = 0;
    for(; i < 16; i++)
    {
        f = ((c ^ d) & b) ^ d;
        g = i;
        FUNC;
    }
    for(; i < 32; i++)
    {
        f = ((b ^ c) & d) ^ c;
        g = (i * 5 + 1) % 16;
        FUNC;
    }
    for(; i < 48; i++)
    {
        f = b ^ c ^ d;
        g = (i * 3 + 5) % 16;
        FUNC;
    }
    for(; i < 64; i++)
    {
        f = (~d | b) ^ c;
        g = i * 7 % 16;
        FUNC;
    }
    IV[0] = htole32(a + le32toh(IV[0]));
    IV[1] = htole32(b + le32toh(IV[1]));
    IV[2] = htole32(c + le32toh(IV[2]));
    IV[3] = htole32(d + le32toh(IV[3]));
    return;
}

#undef FUNC
#undef IV
#undef ROTL
